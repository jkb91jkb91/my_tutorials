- hosts: all
  become: yes
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
      register: update_cache

    - name: zip install
      apt:
        name:
          - unzip
        state: present
        update_cache: yes

    - name: Install ca-certificates curl gnupg 
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present
        update_cache: yes

    - name: Ensure /etc/apt/keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.gpg
        mode: '0644'

    - name: Convert Docker GPG key to dearmored format
      command: gpg --dearmor -o /etc/apt/keyrings/docker.gpg /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg
    
    - name: Set permissions on the dearmored Docker GPG key
      file:
        path: /etc/apt/keyrings/docker.gpg
        mode: '0644'
      
    - name: Add repo to Apt sources
      command: echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Add Docker GPG key and add Docker repository
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.gpg
        mode: '0644'

    - name: Add Docker GPG key and convert to dearmored format
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Add Docker GPG key, convert to dearmored format, and add Docker repository
      shell: >
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" |
        tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Update apt cache
      apt:
        update_cache: yes
      register: update_cache
 
    - name: Install docker dependencies
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Download cri-dockerd
      get_url:
        url: https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.9/cri-dockerd_0.3.9.3-0.ubuntu-bionic_amd64.deb
        dest: /tmp/cri-dockerd_0.3.9.3-0.ubuntu-bionic_amd64.deb

    - name: Install CRI
      command: dpkg -i /tmp/cri-dockerd_0.3.9.3-0.ubuntu-bionic_amd64.deb

    - name: Start cri-docker
      service:
        name: cri-docker
        state: started
        enabled: yes

    - name: Start docker
      service:
        name: docker
        state: started
        enabled: yes


    - name: Add Kubernetes GPG key and repository
      shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg 
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes GPG key and repository2
      shell: >
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' |
        tee /etc/apt/sources.list.d/kubernetes.list
      args:
        creates: /etc/apt/sources.list.d/kubernetes.list

    - name: Update apt cache
      apt:
        update_cache: yes
      register: update_cache

    - name: Install kubernetes
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: Hold kubelet, kubeadm, kubectl packages
      shell: apt-mark hold kubelet kubeadm kubectl

    - name: Install NFS
      apt:
        name:
          - nfs-common
        state: present

    - name: Initialize Kubernetes control plane with dockerd
      shell: sudo kubeadm init --cri-socket unix:///var/run/cri-dockerd.sock

    - name: Ensure .kube directory exists
      file:
        path: "/home/ubuntu/.kube"
        state: directory
        mode: '0755'

    - name: Copy admin.conf to .kube/config
      command: cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
      args:
        creates: "/home/ubuntu/.kube/config"

    - name: Ensure ownership of .kube/config
      shell: chown ubuntu:ubuntu /home/ubuntu/.kube/config
    
    - name: Download weave-daemonset
      get_url:
        url: https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
        dest: /tmp/weave-daemonset-k8s.yaml
        mode: '0644'

    - name: Apply wave
      command: kubectl apply -f /tmp/weave-daemonset-k8s.yaml --kubeconfig=/home/ubuntu/.kube/config

    - name: Restart kubelet service
      service:
        name: kubelet
        state: restarted

    - name: Enable kubelet service
      service:
        name: kubelet
        enabled: yes

    - name: Download .kube/config
      fetch:
        src: /home/ubuntu/.kube/config
        dest: /tmp/config
        flat: yes

    - name: Generate kubeadm join command
      command: sudo kubeadm token create --print-join-command
      register: join_command

    - name: Save join command to file
      copy:
        content: "{{ join_command.stdout }}"
        dest: /tmp/token
    
    - name: Download token
      fetch:
        src: /tmp/token
        dest: /tmp/token
        flat: yes

    - name: Download HELM
      get_url:
        url: https://get.helm.sh/helm-v3.14.0-rc.1-linux-amd64.tar.gz
        dest: /tmp/helm-v3.14.0-rc.1-linux-amd64.tar.gz
        mode: '0644'

    - name: Extract HELM
      command: tar -xzvf /tmp/helm-v3.14.0-rc.1-linux-amd64.tar.gz -C /tmp/

    - name: Move HELM binary to /usr/local/bin
      command: mv /tmp/linux-amd64/helm /usr/local/bin/helm
      args:
        creates: /usr/local/bin/helm
    
    - name: Ensure /usr/local/bin/helm is executable
      file:
        path: /usr/local/bin/helm
        mode: '0755'
        owner: root
        group: root
    


 
   